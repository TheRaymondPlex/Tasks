openapi: 3.0.3
info:
  title: GoRest.co.in API
  version: 0.0.1
servers:
  - url: https://gorest.co.in/public/v2
    description: GoRest API
tags:
  - name: users
    description: Everything about users
paths:
  /users:
    get:
      tags:
        - users
      summary: Getting list of users
      operationId: get10Users
      responses:
        '200':
          description: OK. Everything worked as expected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
            application/xml:
              schema:
                $ref: '#/components/schemas/Users'
        '403':
          description: The authenticated user is not allowed to access the specified API endpoint.
        '404':
          description: The requested resourse does not exist.
        '500':
          description: Internal server error. This could be caused by internal program errors.
    post:
      tags:
        - users
      summary: Create user
      operationId: createUser
      requestBody:
        description: Create user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: A resource was succesfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request. This could be caused by various actions by the user, such as providing invalid JSON data in the request body etc.
        '401':
          description: Authentication failed. You need to be authenticated for updating database.
      security:
        - bearerAuth: []
  /users/{userId}:
    put:
      tags:
        - users
      summary: Update users info by ID
      description: Updates users info. If empty, creates new one.
      operationId: putUserById
      parameters:
        - name: userId
          in: path
          description: ID of user to update
          required: true
          schema:
            type: integer
            format: int64
            example: 5941
      requestBody:
        description: Update an existing user in database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPut'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserPut'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserPut'
      responses:
        '200':
          description: Success. User updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdate'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserUpdate'
        '201':
          description: Success. New user created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
      security:
        - bearerAuth: []
    get:
      tags:
        - users
      summary: Find user by ID
      description: Returns a single user info
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
            example: 5941
      responses:
        '200':
          description: OK. User found. Everything worked as expected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Resource not found
      security:
        - bearerAuth: []
    delete:
      tags:
        - users
      summary: Delete user by ID
      description: Deletes a single user info by ID
      operationId: deleteUserById
      parameters:
        - name: userId
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: integer
            format: int64
            example: 5941
      responses:
        '204':
          description: Success. The resource was deleted successfully.
        '404':
          description: Error. Resource not found.
      security:
        - bearerAuth: []
components:
  schemas:
    Users:
      type: array
      items:
        $ref: '#/components/schemas/User'
      example:
        - id: 5941
          name: Shreyashi Gupta
          email: gupta_shreyashi@leannon-koelpin.org
          gender: male
          status: active
        - id: 5940
          name: Geetanjali Pandey
          email: geetanjali_pandey@kunde.com
          gender: male
          status: inactive
        - id: 5939
          name: Mr. Suryakanta Chaturvedi
          email: chaturvedi_mr_suryakanta@torp-kertzmann.biz
          gender: male
          status: inactive
    User:
      type: object
      properties:
        id:
          type: integer
          example: 8000
          description: Users id
        name:
          type: string
          example: Example Name
          description: Users first and last name
        email:
          type: string
          example: example_email@rest.co
          description: Users email
        gender:
          type: string
          example: male
          description: Users gender
        status:
          type: string
          example: active
          description: Users status
      xml:
        name: user
    UserPut:
      type: object
      properties:
        email:
          type: string
          example: example_email@rest.co
          description: Users new email
        status:
          type: string
          example: active
          description: Users new status
      xml:
        name: user
    UserUpdate:
      type: object
      properties:
        name:
          type: string
          example: Example Name
          description: Users updated first and last name
        email:
          type: string
          example: example_email@rest.co
          description: Users updated email
        gender:
          type: string
          example: male
          description: Users updated gender
        status:
          type: string
          example: active
          description: Users updated status
        id:
          type: integer
          example: 8000
          description: Users id
      xml:
        name: user
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer